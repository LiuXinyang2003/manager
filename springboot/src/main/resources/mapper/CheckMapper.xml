<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.CheckMapper">

    <sql id="Base_Column_List">
        id,name,start,overtime,state,class_id,role1
    </sql>
    <select id="selectUser" resultType="com.example.entity.Check">
        select incheck.*,classes.name as className
        from incheck
        left join student on incheck.username = student.username
        left join classes on classes.id = student.class_id
        <where>
            incheck.name=#{name}
        </where>
        order by id desc
    </select>

    <select id="selectClasses" resultType="com.example.entity.Check">
        select classes.*,teacher.name as teacherName,speciality.name as specialityName
        from classes
        left join teacher on classes.teacher_id = teacher.id
        left join speciality on classes.speciality_id = speciality.id
        <where>
            <if test="id != null"> and id= #{id}</if>
            <if test="name != null"> and classes.name like concat('%', #{name}, '%')</if>
        </where>
            order by id desc
    </select>


    <select id="selectCheck" resultType="com.example.entity.Check">
        select incheck.*,classes.name as className
        from incheck
        left join teacher on incheck.username = teacher.username
        left join classes on teacher.id = classes.teacher_id
        <where>
        </where>
        order by id desc
    </select>


    <select id="selectAll" resultType="com.example.entity.Check">
        select incheck.*,classes.name as className
        from incheck
        left join classes on classes.id = incheck.class_id
        <where>
         <if test="params.name != null and params.name != ''"> and incheck.name like concat('%',#{params.name},'%')</if>
        </where>
        order by id desc
    </select>

    <select id="selectTeacher" resultType="com.example.entity.Check">
        select incheck.*,classes.name as className
        from incheck
        left join classes on classes.id = incheck.class_id
        <where>
            incheck.class_id =#{params.classId}
            <if test="params.name != null and params.name != ''"> and incheck.name like concat('%',#{params.name},'%')</if>
        </where>
        order by id desc
    </select>

    <select id="selectTeacher1" resultType="com.example.entity.Check">
        select incheck.*,classes.name as className
        from incheck
        left join classes on classes.id = incheck.class_id
        <where>
            incheck.role1 = #{params.role} and
            incheck.username = #{params.username}
            <if test="params.name != null and params.name != ''"> and incheck.name like concat('%',#{params.name},'%')</if>
        </where>
    </select>

    <select id="selectById" resultType="com.example.entity.Check">
        select
        <include refid="Base_Column_List" />
        from incheck
        where id = #{id}
    </select>

    <delete id="deleteById">
        delete from incheck
        where  id = #{id}
    </delete>

    <insert id="insert" parameterType="com.example.entity.Check" useGeneratedKeys="true">
        insert into incheck
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="id != null">id,</if>
                <if test="name != null">name,</if>
                <if test="start != null">start,</if>
                <if test="overtime != null">overtime,</if>
                <if test="state != null">state,</if>
                <if test="username != null">username,</if>
                <if test="role != null">role1,</if>
                <if test="classId != null">class_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="id != null">#{id},</if>
                <if test="name != null">#{name},</if>
                <if test="start != null">#{start},</if>
                <if test="overtime != null">#{overtime},</if>
                <if test="state != null">#{state},</if>
                <if test="username != null">#{username},</if>
                <if test="role != null">#{role},</if>
                <if test="classId != null">#{classId},</if>
        </trim>
    </insert>


    <insert id="signAdd" parameterType="com.example.entity.SignInfo" useGeneratedKeys="true">
        insert into signinfo
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="name != null">name,</if>
            <if test="start != null">start,</if>
            <if test="overtime != null">overtime,</if>
            <if test="teacherId != null">teacher_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="name != null">#{name},</if>
            <if test="start != null">#{start},</if>
            <if test="overtime != null">#{overtime},</if>
            <if test="teacherId != null">#{teacherId},</if>
        </trim>
    </insert>

    <insert id="signAdd2" parameterType="map" useGeneratedKeys="true">
        insert into signinfo
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="param1.name != null">name,</if>
            <if test="param2!= null">studentname,</if>
            <if test="param1.start != null">start,</if>
            <if test="param1.overtime != null">overtime,</if>
            <if test="param1.classId != null">class_id,</if>
            <if test="param1.role != null">role,</if>
            <if test="param1.username != null">username,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="param1.name != null">#{param1.name},</if>
            <if test="param2 != null">#{param2},</if>
            <if test="param1.start != null">#{param1.start},</if>
            <if test="param1.overtime != null">#{param1.overtime},</if>
            <if test="param1.classId != null">#{param1.classId},</if>
            <if test="param1.role != null">#{param1.role},</if>
            <if test="param1.username != null">#{param1.username},</if>
        </trim>
    </insert>

    <update id="updateById" parameterType="com.example.entity.Check">
        update incheck
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="start != null">
                start = #{start},
            </if>
            <if test="overtime != null">
                overtime = #{overtime},
            </if>
            <if test="state != null">
                state = #{state},
            </if>
            <if test="role != null">
                role1 = #{role},
            </if>
            <if test="classId != null">
                class_id = #{classId},
            </if>
        </set>
        where id = #{id} 
    </update>

<!--    <update id="updateClassTotal">-->
<!--        UPDATE incheck-->
<!--        SET role1 = (-->
<!--            SELECT COUNT(*)-->
<!--            FROM student-->
<!--            WHERE student.class_id = incheck.class_id-->
<!--        )-->
<!--    </update>-->

    <update id="updateClassId">
        UPDATE incheck
        SET class_id = (
            SELECT classes.id
            FROM classes
                     left join teacher on teacher.class_id = classes.id
            WHERE incheck.username = teacher.username
        )
        WHERE EXISTS (
            SELECT 1
            FROM classes
                     left join teacher on teacher.class_id = classes.id
            WHERE incheck.username = teacher.username
        )
    </update>

</mapper>